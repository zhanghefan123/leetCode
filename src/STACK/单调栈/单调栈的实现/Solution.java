package STACK.单调栈.单调栈的实现;
// 单调栈结构解决的问题
/* 给定一个数组，想要知道所有的数左边的离他最近的比他大的，
右边离他最近的比他大的数，使用O(N)的时间复杂度拿下
比如给定数组：[3,5,2,4,6,0,1,5]
    左    右
 3 null   5
 5 null   6
 2  5     4
 …… 以此类推
*/

// 维护一个从栈底到栈顶从大到小的栈

// 情况1:当栈的栈顶的元素大于要压入的元素的时候进行压栈的操作
// 情况2:当栈的栈顶元素小于要压入的元素的时候进行弹栈的操作此时开始进行信息的记录
// 是谁导致这个数被弹出的，就是这个数右侧最近的大于这个数的值。然后这个数下面的值
// 就是左边离他最近的比他大的数，当下面没有数的时候为空

// 情况3:当栈的栈顶的元素等于要压入的元素的时候将索引和栈顶元素进行合并。
public class Solution {
    public static void main(String[] args) {

    }
}
